// automatically generated by the FlatBuffers compiler, do not modify

package vast_flatbuf.tabular;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

/**
 * used by `ListSchemas` and `ListTables` API
 */
@SuppressWarnings("unused")
public final class ObjectDetails extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static ObjectDetails getRootAsObjectDetails(ByteBuffer _bb) { return getRootAsObjectDetails(_bb, new ObjectDetails()); }
  public static ObjectDetails getRootAsObjectDetails(ByteBuffer _bb, ObjectDetails obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ObjectDetails __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String properties() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer propertiesAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer propertiesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String handle() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer handleAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer handleInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public long numRows() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long sizeInBytes() { int o = __offset(12); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createObjectDetails(FlatBufferBuilder builder,
      int nameOffset,
      int propertiesOffset,
      int handleOffset,
      long num_rows,
      long size_in_bytes) {
    builder.startTable(5);
    ObjectDetails.addSizeInBytes(builder, size_in_bytes);
    ObjectDetails.addNumRows(builder, num_rows);
    ObjectDetails.addHandle(builder, handleOffset);
    ObjectDetails.addProperties(builder, propertiesOffset);
    ObjectDetails.addName(builder, nameOffset);
    return ObjectDetails.endObjectDetails(builder);
  }

  public static void startObjectDetails(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addProperties(FlatBufferBuilder builder, int propertiesOffset) { builder.addOffset(1, propertiesOffset, 0); }
  public static void addHandle(FlatBufferBuilder builder, int handleOffset) { builder.addOffset(2, handleOffset, 0); }
  public static void addNumRows(FlatBufferBuilder builder, long numRows) { builder.addLong(3, numRows, 0L); }
  public static void addSizeInBytes(FlatBufferBuilder builder, long sizeInBytes) { builder.addLong(4, sizeInBytes, 0L); }
  public static int endObjectDetails(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ObjectDetails get(int j) { return get(new ObjectDetails(), j); }
    public ObjectDetails get(ObjectDetails obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

